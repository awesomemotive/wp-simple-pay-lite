/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/admin.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/admin.js":
/*!****************************!*\
  !*** ./assets/js/admin.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _wordpress_hooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/hooks */ "./node_modules/@wordpress/hooks/build-module/index.js");
/* harmony import */ var admin_settings_test_mode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! admin/settings/test-mode.js */ "./assets/js/admin/settings/test-mode.js");
/* harmony import */ var admin_settings_stripe_connect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! admin/settings/stripe-connect.js */ "./assets/js/admin/settings/stripe-connect.js");
/* global spGeneral, jQuery, wpspHooks */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies.
 */


 // Since we rely on WordPress 4.9 and package our own copy of @wordpress/hooks
// it is up to us to create a hooks instance to use in our app.

window.wpspHooks = Object(_wordpress_hooks__WEBPACK_IMPORTED_MODULE_0__["createHooks"])();
var spAdmin = {};

(function ($) {
  'use strict';

  var body, spFormSettings;
  spAdmin = {
    init: function init() {
      // Wait to do this here due to weird loading order of scripts.
      // @todo Redo script dependency management.
      wpspHooks.addAction('settings.toggleTestMode', 'wpsp/settings/stripe-connect', admin_settings_stripe_connect_js__WEBPACK_IMPORTED_MODULE_2__["default"]); // Set main vars on init.

      body = $(document.body);
      spFormSettings = body.find('#simpay-form-settings'); // Use chosen for select fields

      this.setupChosen(); // Media Uploader

      this.addMediaFields(); // Init admin metabox tab clicks.

      this.handleMetaboxTabClick();
      this.stripeConnect(); // Init internal link to tab clicks.

      spFormSettings.on('click.simpayTabLink', '.simpay-tab-link', function (e) {
        e.preventDefault();
        spAdmin.handleInternalLinkToTabClicks($(this));
      }); // Remove image preview click.

      spFormSettings.on('click.simpayImagePreview', '.simpay-remove-image-preview', function (e) {
        spAdmin.handleRemoveImagePreviewClick(e);
      }); // Checkbox section toggles

      spFormSettings.find('.simpay-panel-field').on('change.simpaySectionToggle', '.simpay-section-toggle', function (e) {
        spAdmin.initSectionToggle($(this));
      }); // Show spinner for button clicks

      body.find('.simpay-button').on('click.simpayShowSpinner', function (e) {
        spAdmin.showSpinner($(this));
      }); // Handle the preview button functionality

      body.find('#simpay-preview-button').on('click.simpayPreviewButton', function (e) {
        spAdmin.handlePreviewButton($(this), e);
      }); // Handle the submit when they press enter

      body.find('#post').on('keypress.simpaySubmitOnEnter', function (e) {
        spAdmin.handleSubmitOnEnter($(this), e);
      }); // Multi Toggles (like a radio button with multiple-options)

      spFormSettings.find('.simpay-multi-toggle input[type="radio"]:checked').each(function () {
        spAdmin.initMultiToggle($(this));
      });
      spFormSettings.on('change.simpayMultiToggle', '.simpay-multi-toggle input[type="radio"]', function () {
        spAdmin.initMultiToggle($(this));
      }); // Trigger focus out (blur) for all amount input fields on page load.
      // Should only need for admin. Used to be in shared.js.

      body.find('.simpay-amount-input').trigger('blur.validateAndUpdateAmount');
      body.trigger('simpayAdminInit');
    },
    // TODO This working or needed now?
    handleSubmitOnEnter: function handleSubmitOnEnter(el, e) {
      var keyCode, form, draftButton, publishButton; // Get the keycode

      keyCode = e.keyCode ? e.keyCode : e.which; // Check if the enter button was pressed

      if (13 === keyCode) {
        form = el.closest('form');
        draftButton = form.find('#save-post');
        publishButton = form.find('#publish'); // If there is a draft button found click it otherwise use the publish button.

        if (draftButton.length > 0) {
          draftButton.click();
        } else {
          publishButton.click();
        }
      }
    },
    handlePreviewButton: function handlePreviewButton(el, e) {
      var prevFormAction, formElem;
      e.preventDefault(); // Get the form this button belongs to

      formElem = el.closest('form'); // Get the form action we need to fall back to

      prevFormAction = formElem.attr('action'); // Temporarily change the action of our form to point to the preview page

      formElem.attr('action', el.data('action'));
      formElem.attr('target', '_blank');
      formElem.submit(); // Revert form action to original and set the target back

      formElem.attr('action', prevFormAction);
      formElem.attr('target', '');
    },
    showSpinner: function showSpinner(el) {
      el.parent().find('.spinner').css('visibility', 'visible');
    },
    handleRemoveImagePreviewClick: function handleRemoveImagePreviewClick(e) {
      e.preventDefault();
      spFormSettings.find('.simpay-image-preview-wrap').hide();
      spFormSettings.find('#_image_url').val('');
    },
    addMediaFields: function addMediaFields() {
      var simpayMediaUploader;
      $('.simpay-media-uploader').on('click', function (e) {
        e.preventDefault(); // This is our button

        window.simpayMediaUploaderInputField = $(this); // If the uploader object has already been created, reopen the dialog

        if (simpayMediaUploader) {
          simpayMediaUploader.open();
          return;
        } // Extend the wp.media object


        simpayMediaUploader = wp.media.frames.file_frame = wp.media({
          title: spGeneral.i18n.mediaTitle,
          button: {
            text: spGeneral.i18n.mediaButtonText
          },
          multiple: false
        }); // When a file is selected, grab the URL and set it as the text field's value

        simpayMediaUploader.on('select', function () {
          var attachment = simpayMediaUploader.state().get('selection').first().toJSON(),
              inputField = window.simpayMediaUploaderInputField.prev(),
              // Get the field previous to our button, aka our input field.
          image = 'id' === inputField.data('fvalue') ? attachment.id : attachment.url; // Update our image preview

          $('.simpay-image-preview-wrap').show();
          $('.simpay-image-preview').prop('src', image);
          inputField.val(image);
        }); // Open the uploader dialog

        simpayMediaUploader.open();
      });
    },
    setupChosen: function setupChosen() {
      var chosenSelect = $('.simpay-chosen-select, .simpay-chosen-search');
      chosenSelect.chosen({
        disable_search_threshold: 20
      });
      chosenSelect.chosen();
    },
    // Tabbed Panels in Settings Meta Box.
    // All nav list items are inactive (no "active" class) except first by default.
    // All tab panel content containers are hidden ("simpay-panel-hidden" class) except first by default.
    // Can make specific panel active on initial page load via url hash.
    handleMetaboxTabClick: function handleMetaboxTabClick() {
      var tabLinks = $('ul.simpay-tabs a');
      var panels = $('div.simpay-panel');
      var allTabLinkParents = tabLinks.parents('li');
      var activeTabLink = {}; // When a tab link is clicked.

      tabLinks.on('click', function (e) {
        var currentTabLinkParent = $(this).parent(); // Assign current tab element to var from link href attribute.

        var currentTabEl = $($(this).attr('href')); // Set the hash in the URL so after saving we get the same tab

        location.hash = $(this).attr('href');
        e.preventDefault(); // Remove active class from all tabs.

        allTabLinkParents.removeClass('active'); // Add active class back to current tab.

        currentTabLinkParent.addClass('active'); // Hide content with all tab panels.

        panels.addClass('simpay-panel-hidden'); // Show current tab's content.

        currentTabEl.removeClass('simpay-panel-hidden');
        e.stopPropagation();
      }); // Auto open tab if in url hash.

      if (location.hash.length) {
        // This prevents the hash being used like an anchor
        setTimeout(function () {
          window.scrollTo(0, 0);
        }, 1);
        activeTabLink = $('ul.simpay-tabs a[href="' + location.hash + '"]');

        if (activeTabLink.length) {
          activeTabLink.click();
        }
      }
    },
    stripeConnect: function stripeConnect() {
      // Hide initially.
      $('#simpay-settings-keys-mode-test-mode').closest('.form-table').prev().hide().prev().hide();
      $('#wpsp-api-keys-row-reveal button').click(function (e) {
        e.preventDefault();
        $('#simpay-settings-keys-mode-test-mode').closest('.form-table').prev().show().prev().show();
        $('#wpsp-api-keys-row-hide').show();
        $(this).parent().hide();
      });
      $('#wpsp-api-keys-row-hide button').click(function (e) {
        e.preventDefault();
        $('#simpay-settings-keys-mode-test-mode').closest('.form-table').prev().hide().prev().hide();
        $('#wpsp-api-keys-row-reveal').show();
        $(this).parent().hide();
      });
    },
    // Handle links within tab content to other tabs.
    // When one is clicked, trigger the corresponding tab link click.
    handleInternalLinkToTabClicks: function handleInternalLinkToTabClicks(el) {
      var tabToShowId = el.data('show-tab'),
          tabToShowLinkEl = body.find('.' + tabToShowId + '-tab a');
      tabToShowLinkEl.click();
    },
    initSectionToggle: function initSectionToggle(el) {
      // TODO DRY
      //var sectionElem = el.closest( '.simpay-panel-field' ).parent().find( showElem );
      var showElem = el.data('show');

      if (el.is(':checked')) {
        el.closest('.simpay-panel-field').parent().find(showElem).show();
      } else {
        el.closest('.simpay-panel-field').parent().find(showElem).hide();
      }
    },
    initMultiToggle: function initMultiToggle(el) {
      var selectedId = el.attr('id'); // Hide all options first. This allows us to show multiple sections with the classes

      el.closest('.simpay-field-radios-inline').find('input[type="radio"]').each(function (i) {
        // $( this ) in this context is the current iteration, not what is set to elem. so we need to keep it here
        spFormSettings.find('.toggle-' + $(this).attr('id')).hide();
      }); // Show elements that have the correct class

      spFormSettings.find('.toggle-' + selectedId).show();
    }
  };
  $(document).ready(function ($) {
    spAdmin.init();
  });
})(jQuery);

/***/ }),

/***/ "./assets/js/admin/settings/stripe-connect.js":
/*!****************************************************!*\
  !*** ./assets/js/admin/settings/stripe-connect.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return toggleStripeConnectNotice; });
/* harmony import */ var _wordpress_dom_ready__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/dom-ready */ "./node_modules/@wordpress/dom-ready/build-module/index.js");
/* global wp, _, wpspHooks */

/**
 * WordPress dependencies
 */

/**
 * Toggle fields based on current mode.
 */

function toggleStripeConnectNotice(newMode, oldMode) {
  // Only how a notice when the mode changes.
  if (newMode === oldMode) {
    return;
  }

  var notice = document.getElementById('simpay-test-mode-toggle-notice');
  var statusText = document.getElementById('simpay-toggle-notice-status');
  var statusLink = document.getElementById('simpay-toggle-notice-status-link');
  notice.classList.add('notice');
  notice.classList.add('notice-warning');
  notice.style.display = 'block';

  if (!statusText || !statusLink) {
    return;
  }

  statusText.innerHTML = '<strong>' + statusText.dataset[newMode] + '</strong>';
  statusLink.href = statusLink.dataset[newMode];
}
/**
 * Shows the currently connected Stripe account's email address.
 */

Object(_wordpress_dom_ready__WEBPACK_IMPORTED_MODULE_0__["default"])(function () {
  var containerEl = document.getElementById('simpay-stripe-account-info');

  if (!containerEl) {
    return;
  }

  wp.ajax.send('simpay_stripe_connect_account_information', {
    data: {
      nonce: containerEl.dataset.nonce,
      account_id: containerEl.dataset.accountId
    },
    success: function success(response) {
      containerEl.querySelector('p').innerHTML = response.message;
      containerEl.style.display = 'block';
      containerEl.classList.add('notice');

      if ('simpay-stripe-activated-account-actions' === response.actions) {
        containerEl.classList.add('notice-info');
      } else {
        containerEl.classList.add('notice-warning');
      }

      var actionsEl = document.getElementById(response.actions);

      if (actionsEl) {
        actionsEl.style.display = 'block';
      }
    },
    error: function error(response) {
      containerEl.querySelector('p').innerHTML = response.message;
      containerEl.style.display = 'block';
      containerEl.classList.add('notice');
      containerEl.classList.add('notice-error');
      var actionsEl = document.getElementById(response.actions);

      if (actionsEl) {
        actionsEl.style.display = 'block';
      }
    }
  });
});

/***/ }),

/***/ "./assets/js/admin/settings/test-mode.js":
/*!***********************************************!*\
  !*** ./assets/js/admin/settings/test-mode.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _wordpress_dom_ready__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/dom-ready */ "./node_modules/@wordpress/dom-ready/build-module/index.js");
/* global wpspHooks, _ */

/**
 * WordPress dependencies
 */
 // Need to wait for the DOM because the script is not enqueued at the end of the page.
// @todo Investigate enqueing admin.js in the footer.

Object(_wordpress_dom_ready__WEBPACK_IMPORTED_MODULE_0__["default"])(function () {
  var radioEls = document.querySelectorAll('[name="simpay_settings_keys[mode][test_mode]"]');
  var selectedRadioEl = document.querySelector('[name="simpay_settings_keys[mode][test_mode]"]:checked');

  if (0 === radioEls.length) {
    return;
  }

  var currentMode = 'enabled' === selectedRadioEl.value ? 'test' : 'live';
  wpspHooks.doAction('settings.toggleTestMode', currentMode, currentMode); // Update when the input changes.

  _.each(radioEls, function (radio) {
    return radio.addEventListener('change', function (e) {
      var newMode = 'enabled' === e.target.value ? 'test' : 'live';
      wpspHooks.doAction('settings.toggleTestMode', newMode, 'test' === newMode ? 'live' : 'test');
    });
  });
});

/***/ }),

/***/ "./node_modules/@wordpress/dom-ready/build-module/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@wordpress/dom-ready/build-module/index.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Specify a function to execute when the DOM is fully loaded.
 *
 * @param {Function} callback A function to execute after the DOM is ready.
 *
 * @example
 * ```js
 * import domReady from '@wordpress/dom-ready';
 *
 * domReady( function() {
 * 	//do something after DOM loads.
 * } );
 * ```
 *
 * @return {void}
 */
var domReady = function domReady(callback) {
  if (document.readyState === 'complete' || // DOMContentLoaded + Images/Styles/etc loaded, so we call directly.
  document.readyState === 'interactive' // DOMContentLoaded fires at this point, so we call directly.
  ) {
      return callback();
    } // DOMContentLoaded has not fired yet, delay callback until then.


  document.addEventListener('DOMContentLoaded', callback);
};

/* harmony default export */ __webpack_exports__["default"] = (domReady);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createAddHook.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createAddHook.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validateNamespace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validateNamespace.js */ "./node_modules/@wordpress/hooks/build-module/validateNamespace.js");
/* harmony import */ var _validateHookName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validateHookName.js */ "./node_modules/@wordpress/hooks/build-module/validateHookName.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ */ "./node_modules/@wordpress/hooks/build-module/index.js");
/**
 * Internal dependencies
 */



/**
 * Returns a function which, when invoked, will add a hook.
 *
 * @param  {Object}   hooks Stored hooks, keyed by hook name.
 *
 * @return {Function}       Function that adds a new hook.
 */

function createAddHook(hooks) {
  /**
   * Adds the hook to the appropriate hooks container.
   *
   * @param {string}   hookName  Name of hook to add
   * @param {string}   namespace The unique namespace identifying the callback in the form `vendor/plugin/function`.
   * @param {Function} callback  Function to call when the hook is run
   * @param {?number}  priority  Priority of this hook (default=10)
   */
  return function addHook(hookName, namespace, callback) {
    var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;

    if (!Object(_validateHookName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(hookName)) {
      return;
    }

    if (!Object(_validateNamespace_js__WEBPACK_IMPORTED_MODULE_0__["default"])(namespace)) {
      return;
    }

    if ('function' !== typeof callback) {
      // eslint-disable-next-line no-console
      console.error('The hook callback must be a function.');
      return;
    } // Validate numeric priority


    if ('number' !== typeof priority) {
      // eslint-disable-next-line no-console
      console.error('If specified, the hook priority must be a number.');
      return;
    }

    var handler = {
      callback: callback,
      priority: priority,
      namespace: namespace
    };

    if (hooks[hookName]) {
      // Find the correct insert index of the new hook.
      var handlers = hooks[hookName].handlers;
      var i;

      for (i = handlers.length; i > 0; i--) {
        if (priority >= handlers[i - 1].priority) {
          break;
        }
      }

      if (i === handlers.length) {
        // If append, operate via direct assignment.
        handlers[i] = handler;
      } else {
        // Otherwise, insert before index via splice.
        handlers.splice(i, 0, handler);
      } // We may also be currently executing this hook.  If the callback
      // we're adding would come after the current callback, there's no
      // problem; otherwise we need to increase the execution index of
      // any other runs by 1 to account for the added element.


      (hooks.__current || []).forEach(function (hookInfo) {
        if (hookInfo.name === hookName && hookInfo.currentIndex >= i) {
          hookInfo.currentIndex++;
        }
      });
    } else {
      // This is the first hook of its type.
      hooks[hookName] = {
        handlers: [handler],
        runs: 0
      };
    }

    if (hookName !== 'hookAdded') {
      Object(___WEBPACK_IMPORTED_MODULE_2__["doAction"])('hookAdded', hookName, namespace, callback, priority);
    }
  };
}

/* harmony default export */ __webpack_exports__["default"] = (createAddHook);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createCurrentHook.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createCurrentHook.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Returns a function which, when invoked, will return the name of the
 * currently running hook, or `null` if no hook of the given type is currently
 * running.
 *
 * @param  {Object}   hooks          Stored hooks, keyed by hook name.
 *
 * @return {Function}                Function that returns the current hook.
 */
function createCurrentHook(hooks) {
  /**
   * Returns the name of the currently running hook, or `null` if no hook of
   * the given type is currently running.
   *
   * @return {?string}             The name of the currently running hook, or
   *                               `null` if no hook is currently running.
   */
  return function currentHook() {
    if (!hooks.__current || !hooks.__current.length) {
      return null;
    }

    return hooks.__current[hooks.__current.length - 1].name;
  };
}

/* harmony default export */ __webpack_exports__["default"] = (createCurrentHook);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createDidHook.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createDidHook.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validateHookName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validateHookName.js */ "./node_modules/@wordpress/hooks/build-module/validateHookName.js");
/**
 * Internal dependencies
 */

/**
 * Returns a function which, when invoked, will return the number of times a
 * hook has been called.
 *
 * @param  {Object}   hooks Stored hooks, keyed by hook name.
 *
 * @return {Function}       Function that returns a hook's call count.
 */

function createDidHook(hooks) {
  /**
   * Returns the number of times an action has been fired.
   *
   * @param  {string} hookName The hook name to check.
   *
   * @return {number}          The number of times the hook has run.
   */
  return function didHook(hookName) {
    if (!Object(_validateHookName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(hookName)) {
      return;
    }

    return hooks[hookName] && hooks[hookName].runs ? hooks[hookName].runs : 0;
  };
}

/* harmony default export */ __webpack_exports__["default"] = (createDidHook);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createDoingHook.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createDoingHook.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Returns a function which, when invoked, will return whether a hook is
 * currently being executed.
 *
 * @param  {Object}   hooks Stored hooks, keyed by hook name.
 *
 * @return {Function}       Function that returns whether a hook is currently
 *                          being executed.
 */
function createDoingHook(hooks) {
  /**
   * Returns whether a hook is currently being executed.
   *
   * @param  {?string} hookName The name of the hook to check for.  If
   *                            omitted, will check for any hook being executed.
   *
   * @return {boolean}             Whether the hook is being executed.
   */
  return function doingHook(hookName) {
    // If the hookName was not passed, check for any current hook.
    if ('undefined' === typeof hookName) {
      return 'undefined' !== typeof hooks.__current[0];
    } // Return the __current hook.


    return hooks.__current[0] ? hookName === hooks.__current[0].name : false;
  };
}

/* harmony default export */ __webpack_exports__["default"] = (createDoingHook);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createHasHook.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createHasHook.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Returns a function which, when invoked, will return whether any handlers are
 * attached to a particular hook.
 *
 * @param  {Object}   hooks Stored hooks, keyed by hook name.
 *
 * @return {Function}       Function that returns whether any handlers are
 *                          attached to a particular hook.
 */
function createHasHook(hooks) {
  /**
   * Returns how many handlers are attached for the given hook.
   *
   * @param  {string}  hookName The name of the hook to check for.
   *
   * @return {boolean} Whether there are handlers that are attached to the given hook.
   */
  return function hasHook(hookName) {
    return hookName in hooks;
  };
}

/* harmony default export */ __webpack_exports__["default"] = (createHasHook);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createHooks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createHooks.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _createAddHook__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createAddHook */ "./node_modules/@wordpress/hooks/build-module/createAddHook.js");
/* harmony import */ var _createRemoveHook__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createRemoveHook */ "./node_modules/@wordpress/hooks/build-module/createRemoveHook.js");
/* harmony import */ var _createHasHook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createHasHook */ "./node_modules/@wordpress/hooks/build-module/createHasHook.js");
/* harmony import */ var _createRunHook__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createRunHook */ "./node_modules/@wordpress/hooks/build-module/createRunHook.js");
/* harmony import */ var _createCurrentHook__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createCurrentHook */ "./node_modules/@wordpress/hooks/build-module/createCurrentHook.js");
/* harmony import */ var _createDoingHook__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createDoingHook */ "./node_modules/@wordpress/hooks/build-module/createDoingHook.js");
/* harmony import */ var _createDidHook__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./createDidHook */ "./node_modules/@wordpress/hooks/build-module/createDidHook.js");
/**
 * Internal dependencies
 */







/**
 * Returns an instance of the hooks object.
 *
 * @return {Object} Object that contains all hooks.
 */

function createHooks() {
  var actions = Object.create(null);
  var filters = Object.create(null);
  actions.__current = [];
  filters.__current = [];
  return {
    addAction: Object(_createAddHook__WEBPACK_IMPORTED_MODULE_0__["default"])(actions),
    addFilter: Object(_createAddHook__WEBPACK_IMPORTED_MODULE_0__["default"])(filters),
    removeAction: Object(_createRemoveHook__WEBPACK_IMPORTED_MODULE_1__["default"])(actions),
    removeFilter: Object(_createRemoveHook__WEBPACK_IMPORTED_MODULE_1__["default"])(filters),
    hasAction: Object(_createHasHook__WEBPACK_IMPORTED_MODULE_2__["default"])(actions),
    hasFilter: Object(_createHasHook__WEBPACK_IMPORTED_MODULE_2__["default"])(filters),
    removeAllActions: Object(_createRemoveHook__WEBPACK_IMPORTED_MODULE_1__["default"])(actions, true),
    removeAllFilters: Object(_createRemoveHook__WEBPACK_IMPORTED_MODULE_1__["default"])(filters, true),
    doAction: Object(_createRunHook__WEBPACK_IMPORTED_MODULE_3__["default"])(actions),
    applyFilters: Object(_createRunHook__WEBPACK_IMPORTED_MODULE_3__["default"])(filters, true),
    currentAction: Object(_createCurrentHook__WEBPACK_IMPORTED_MODULE_4__["default"])(actions),
    currentFilter: Object(_createCurrentHook__WEBPACK_IMPORTED_MODULE_4__["default"])(filters),
    doingAction: Object(_createDoingHook__WEBPACK_IMPORTED_MODULE_5__["default"])(actions),
    doingFilter: Object(_createDoingHook__WEBPACK_IMPORTED_MODULE_5__["default"])(filters),
    didAction: Object(_createDidHook__WEBPACK_IMPORTED_MODULE_6__["default"])(actions),
    didFilter: Object(_createDidHook__WEBPACK_IMPORTED_MODULE_6__["default"])(filters),
    actions: actions,
    filters: filters
  };
}

/* harmony default export */ __webpack_exports__["default"] = (createHooks);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createRemoveHook.js":
/*!************************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createRemoveHook.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validateNamespace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validateNamespace.js */ "./node_modules/@wordpress/hooks/build-module/validateNamespace.js");
/* harmony import */ var _validateHookName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validateHookName.js */ "./node_modules/@wordpress/hooks/build-module/validateHookName.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ */ "./node_modules/@wordpress/hooks/build-module/index.js");
/**
 * Internal dependencies
 */



/**
 * Returns a function which, when invoked, will remove a specified hook or all
 * hooks by the given name.
 *
 * @param  {Object}   hooks      Stored hooks, keyed by hook name.
 * @param  {boolean}     removeAll  Whether to remove all callbacks for a hookName, without regard to namespace. Used to create `removeAll*` functions.
 *
 * @return {Function}            Function that removes hooks.
 */

function createRemoveHook(hooks, removeAll) {
  /**
   * Removes the specified callback (or all callbacks) from the hook with a
   * given hookName and namespace.
   *
   * @param {string}    hookName  The name of the hook to modify.
   * @param {string}    namespace The unique namespace identifying the callback in the form `vendor/plugin/function`.
   *
   * @return {number}             The number of callbacks removed.
   */
  return function removeHook(hookName, namespace) {
    if (!Object(_validateHookName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(hookName)) {
      return;
    }

    if (!removeAll && !Object(_validateNamespace_js__WEBPACK_IMPORTED_MODULE_0__["default"])(namespace)) {
      return;
    } // Bail if no hooks exist by this name


    if (!hooks[hookName]) {
      return 0;
    }

    var handlersRemoved = 0;

    if (removeAll) {
      handlersRemoved = hooks[hookName].handlers.length;
      hooks[hookName] = {
        runs: hooks[hookName].runs,
        handlers: []
      };
    } else {
      // Try to find the specified callback to remove.
      var handlers = hooks[hookName].handlers;

      var _loop = function _loop(i) {
        if (handlers[i].namespace === namespace) {
          handlers.splice(i, 1);
          handlersRemoved++; // This callback may also be part of a hook that is
          // currently executing.  If the callback we're removing
          // comes after the current callback, there's no problem;
          // otherwise we need to decrease the execution index of any
          // other runs by 1 to account for the removed element.

          (hooks.__current || []).forEach(function (hookInfo) {
            if (hookInfo.name === hookName && hookInfo.currentIndex >= i) {
              hookInfo.currentIndex--;
            }
          });
        }
      };

      for (var i = handlers.length - 1; i >= 0; i--) {
        _loop(i);
      }
    }

    if (hookName !== 'hookRemoved') {
      Object(___WEBPACK_IMPORTED_MODULE_2__["doAction"])('hookRemoved', hookName, namespace);
    }

    return handlersRemoved;
  };
}

/* harmony default export */ __webpack_exports__["default"] = (createRemoveHook);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createRunHook.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createRunHook.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Returns a function which, when invoked, will execute all callbacks
 * registered to a hook of the specified type, optionally returning the final
 * value of the call chain.
 *
 * @param  {Object}   hooks          Stored hooks, keyed by hook name.
 * @param  {?boolean}    returnFirstArg Whether each hook callback is expected to
 *                                   return its first argument.
 *
 * @return {Function}                Function that runs hook callbacks.
 */
function createRunHook(hooks, returnFirstArg) {
  /**
   * Runs all callbacks for the specified hook.
   *
   * @param  {string} hookName The name of the hook to run.
   * @param  {...*}   args     Arguments to pass to the hook callbacks.
   *
   * @return {*}               Return value of runner, if applicable.
   */
  return function runHooks(hookName) {
    if (!hooks[hookName]) {
      hooks[hookName] = {
        handlers: [],
        runs: 0
      };
    }

    hooks[hookName].runs++;
    var handlers = hooks[hookName].handlers;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!handlers || !handlers.length) {
      return returnFirstArg ? args[0] : undefined;
    }

    var hookInfo = {
      name: hookName,
      currentIndex: 0
    };

    hooks.__current.push(hookInfo);

    while (hookInfo.currentIndex < handlers.length) {
      var handler = handlers[hookInfo.currentIndex];
      var result = handler.callback.apply(null, args);

      if (returnFirstArg) {
        args[0] = result;
      }

      hookInfo.currentIndex++;
    }

    hooks.__current.pop();

    if (returnFirstArg) {
      return args[0];
    }
  };
}

/* harmony default export */ __webpack_exports__["default"] = (createRunHook);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/index.js ***!
  \*************************************************************/
/*! exports provided: createHooks, addAction, addFilter, removeAction, removeFilter, hasAction, hasFilter, removeAllActions, removeAllFilters, doAction, applyFilters, currentAction, currentFilter, doingAction, doingFilter, didAction, didFilter, actions, filters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addAction", function() { return addAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addFilter", function() { return addFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAction", function() { return removeAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeFilter", function() { return removeFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasAction", function() { return hasAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasFilter", function() { return hasFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAllActions", function() { return removeAllActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAllFilters", function() { return removeAllFilters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doAction", function() { return doAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyFilters", function() { return applyFilters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "currentAction", function() { return currentAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "currentFilter", function() { return currentFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doingAction", function() { return doingAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doingFilter", function() { return doingFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "didAction", function() { return didAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "didFilter", function() { return didFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actions", function() { return actions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filters", function() { return filters; });
/* harmony import */ var _createHooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createHooks */ "./node_modules/@wordpress/hooks/build-module/createHooks.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createHooks", function() { return _createHooks__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/**
 * Internal dependencies
 */


var _createHooks = Object(_createHooks__WEBPACK_IMPORTED_MODULE_0__["default"])(),
    addAction = _createHooks.addAction,
    addFilter = _createHooks.addFilter,
    removeAction = _createHooks.removeAction,
    removeFilter = _createHooks.removeFilter,
    hasAction = _createHooks.hasAction,
    hasFilter = _createHooks.hasFilter,
    removeAllActions = _createHooks.removeAllActions,
    removeAllFilters = _createHooks.removeAllFilters,
    doAction = _createHooks.doAction,
    applyFilters = _createHooks.applyFilters,
    currentAction = _createHooks.currentAction,
    currentFilter = _createHooks.currentFilter,
    doingAction = _createHooks.doingAction,
    doingFilter = _createHooks.doingFilter,
    didAction = _createHooks.didAction,
    didFilter = _createHooks.didFilter,
    actions = _createHooks.actions,
    filters = _createHooks.filters;




/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/validateHookName.js":
/*!************************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/validateHookName.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Validate a hookName string.
 *
 * @param  {string} hookName The hook name to validate. Should be a non empty string containing
 *                           only numbers, letters, dashes, periods and underscores. Also,
 *                           the hook name cannot begin with `__`.
 *
 * @return {boolean}            Whether the hook name is valid.
 */
function validateHookName(hookName) {
  if ('string' !== typeof hookName || '' === hookName) {
    // eslint-disable-next-line no-console
    console.error('The hook name must be a non-empty string.');
    return false;
  }

  if (/^__/.test(hookName)) {
    // eslint-disable-next-line no-console
    console.error('The hook name cannot begin with `__`.');
    return false;
  }

  if (!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(hookName)) {
    // eslint-disable-next-line no-console
    console.error('The hook name can only contain numbers, letters, dashes, periods and underscores.');
    return false;
  }

  return true;
}

/* harmony default export */ __webpack_exports__["default"] = (validateHookName);


/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/validateNamespace.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/validateNamespace.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Validate a namespace string.
 *
 * @param  {string} namespace The namespace to validate - should take the form
 *                            `vendor/plugin/function`.
 *
 * @return {boolean}             Whether the namespace is valid.
 */
function validateNamespace(namespace) {
  if ('string' !== typeof namespace || '' === namespace) {
    // eslint-disable-next-line no-console
    console.error('The namespace must be a non-empty string.');
    return false;
  }

  if (!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(namespace)) {
    // eslint-disable-next-line no-console
    console.error('The namespace can only contain numbers, letters, dashes, periods, underscores and slashes.');
    return false;
  }

  return true;
}

/* harmony default export */ __webpack_exports__["default"] = (validateNamespace);


/***/ })

/******/ });
//# sourceMappingURL=admin.min.js.map